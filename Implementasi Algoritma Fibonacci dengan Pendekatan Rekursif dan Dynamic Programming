#include <iostream>
#include <chrono>
#include <vector>
using namespace std;
using namespace std::chrono;

long long fibonacciRecursive(int n) {
    if (n <= 1)
        return n;
    return fibonacciRecursive(n - 1) + fibonacciRecursive(n - 2);
}

long long fibonacciDP(int n) {
    if (n <= 1)
        return n;
    vector<long long> dp(n + 1, 0);
    dp[1] = 1;
    for (int i = 2; i <= n; ++i) {
        dp[i] = dp[i - 1] + dp[i - 2];
    }
    return dp[n];
}

void measureExecutionTime(int n) {
    auto start = high_resolution_clock::now();
    auto durationRecursive = microseconds::zero();

    if (n <= 40) {
        fibonacciRecursive(n);
        auto stop = high_resolution_clock::now();
        durationRecursive = duration_cast<microseconds>(stop - start);
    }
    
    start = high_resolution_clock::now();
    fibonacciDP(n);
    auto stop = high_resolution_clock::now();
    auto durationDP = duration_cast<microseconds>(stop - start);
    
    cout << "n = " << n << "\n";
    if (n <= 40) {
        cout << "Rekursif: " << durationRecursive.count() << " microseconds\n";
    } else {
        cout << "Rekursif: Not measured (too slow for large n)\n";
    }
    cout << "Dynamic Programming: " << durationDP.count() << " microseconds\n";
    cout << "-------------------------\n";
}

int main() {
    vector<int> testValues = {10, 25, 30, 40, 50};

    for (int n : testValues) {
        measureExecutionTime(n);
    }

    return 0;
}
